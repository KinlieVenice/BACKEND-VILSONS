// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Tables

model User {
  id String @id @default(uuid())

  fullName        String  @db.VarChar(100)
  username    String  @unique @db.VarChar(100)
  phone       String @db.VarChar(13)
  email       String  @unique @db.VarChar(100)
  hashPwd     String  @db.VarChar(255)
  description String?

  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String?
  updatedAt   DateTime @updatedAt
  updatedById String?

  admin       Admin[]
  customer    Customer[]
  contractor  Contractor[]
  employee    Employee[]
  activityLog ActivityLog[]
  roles       UserRole[]

  edits           UserEdit[] @relation("UserEditedVer")
  createdUsers    User[]     @relation("CreatedBy")
  createdUserEdit UserEdit[] @relation("CreatedBy")

  createdRole            Role[]            @relation("CreatedBy")
  createdBranches        Branch[]          @relation("CreatedBy")
  createdBranchEdit      BranchEdit[]      @relation("CreatedBy")
  createdTrucks          Truck[]           @relation("CreatedBy")
  createdTransaction     Transaction[]     @relation("CreatedBy")
  createdTransactionEdit TransactionEdit[] @relation("CreatedBy")
  createdJobOrder        JobOrder[]        @relation("CreatedBy")
  createdJobOrderEdit    JobOrderEdit[]    @relation("CreatedBy")

  transferredTruckOwnership TruckOwnership[] @relation("TransferredBy")

  updatedUserEdits UserEdit[] @relation("UpdatedBy")

  updatedBranches        Branch[]          @relation("UpdatedBy")
  updatedBranchEdits     BranchEdit[]      @relation("UpdatedBy")
  updatedTransaction     Transaction[]     @relation("UpdatedBy")
  updatedTransactionEdit TransactionEdit[] @relation("UpdatedBy")
  updatedJobOrder        JobOrder[]        @relation("UpdatedBy")
  updatedJobOrderEdit    JobOrderEdit[]    @relation("UpdatedBy")

  createdBy User? @relation("CreatedBy", fields: [createdById], references: [id])
}

model UserEdit {
  id     String  @id @default(uuid())
  userId String?

  fullName        String  @db.VarChar(100)
  phone       String @db.VarChar(13)
  email       String  @db.VarChar(100)
  hashPwd     String  @db.VarChar(255)
  description String?

  requestType    RequestType
  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime  @default(now())
  createdById String?
  updatedAt   DateTime? @updatedAt
  updatedById String?

  user      User? @relation("UserEditedVer", fields: [userId], references: [id])
  updatedBy User? @relation("UpdatedBy", fields: [updatedById], references: [id])
  createdBy User? @relation("CreatedBy", fields: [createdById], references: [id])
}

model Admin {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdContractorPay     ContractorPay[]     @relation("CreatedBy")
  updatedContractorPay     ContractorPay[]     @relation("UpdatedBy")
  createdContractorPayEdit ContractorPayEdit[] @relation("CreatedBy")
  updatedContractorPayEdit ContractorPayEdit[] @relation("UpdatedBy")

  createdEmployeeSalary     EmployeeSalary[]     @relation("CreatedBy")
  updatedEmployeeSalary     EmployeeSalary[]     @relation("UpdatedBy")
  createdEmployeeSalaryEdit EmployeeSalaryEdit[] @relation("CreatedBy")
  updatedEmployeeSalaryEdit EmployeeSalaryEdit[] @relation("UpdatedBy")

  createdEquipment     Equipment[]     @relation("CreatedBy")
  updatedEquipment     Equipment[]     @relation("UpdatedBy")
  createdEquipmentEdit EquipmentEdit[] @relation("CreatedBy")
  updatedEquipmentEdit EquipmentEdit[] @relation("UpdatedBy")

  createdOtherIncome     OtherIncome[]     @relation("CreatedBy")
  updatedOtherIncome     OtherIncome[]     @relation("UpdatedBy")
  createdOtherIncomeEdit OtherIncomeEdit[] @relation("CreatedBy")
  updatedOtherIncomeEdit OtherIncomeEdit[] @relation("UpdatedBy")

  createdOverhead     Overhead[]     @relation("CreatedBy")
  updatedOverhead     Overhead[]     @relation("UpdatedBy")
  createdOverheadEdit OverheadEdit[] @relation("CreatedBy")
  updatedOverheadEdit OverheadEdit[] @relation("UpdatedBy")
}

model Customer {
  id     String           @id @default(uuid())
  userId String
  trucks TruckOwnership[]
  user   User             @relation(fields: [userId], references: [id])
}

model Contractor {
  id         String  @id @default(uuid())
  userId     String
  commission Decimal @db.Decimal(13, 2)

  contractorPay ContractorPay[]
  JobOrder      JobOrder[]
  user          User            @relation(fields: [userId], references: [id])
}

model Employee {
  id             String           @id @default(uuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  employeeSalary EmployeeSalary[]
}

model Branch {
  id String @id @default(uuid())

  branchName           String         @db.VarChar(100)
  description    String
  address        String
  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  JobOrders    JobOrder[]
  OtherIncomes OtherIncome[]
  Equipments   Equipment[]
  Overheads    Overhead[]

  JobOrderEdit         JobOrderEdit[]
  OtherIncomeEdit      OtherIncomeEdit[]
  EquipmentEdit        EquipmentEdit[]
  OverheadExpensesEdit OverheadEdit[]

  edits BranchEdit[]

  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy User @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model BranchEdit {
  id       String  @id @default(uuid())
  branchId String

  branchName        String @db.VarChar(100)
  description String
  address     String

  requestType    RequestType
  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime  @default(now())
  createdById String
  updatedAt   DateTime? @updatedAt
  updatedById String

  branch    Branch @relation(fields: [branchId], references: [id])
  createdBy User   @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy User   @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model Truck {
  id String @id @default(uuid())

  plate       String   @db.VarChar(10)
  make        String   @db.VarChar(20)
  model       String   @db.VarChar(20)
  createdAt   DateTime @default(now())
  createdById String

  owners    TruckOwnership[]
  jobOrders JobOrder[]

  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])
}

model TruckOwnership {
  id      String @id @default(uuid())
  truckId String
  truck   Truck  @relation(fields: [truckId], references: [id])

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  transferredById String
  transferredBy   User   @relation("TransferredBy", fields: [transferredById], references: [id])

  startDate DateTime  @default(now())
  endDate   DateTime?
}

model ContractorPay {
  id           String @id @default(uuid())
  contractorId String

  type   PaymentType
  amount Decimal     @db.Decimal(13, 2)

  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  edits ContractorPayEdit[]

  contractor Contractor @relation(fields: [contractorId], references: [id])
  createdBy  Admin      @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy  Admin      @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model ContractorPayEdit {
  id              String  @id @default(uuid())
  contractorPayId String

  type   PaymentType
  amount Decimal     @db.Decimal(13, 2)

  requestType    RequestType
  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  createdBy     Admin          @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy     Admin          @relation("UpdatedBy", fields: [updatedById], references: [id])
  contractorPay ContractorPay @relation(fields: [contractorPayId], references: [id])
}

model PayComponent {
  id                 String               @id @default(uuid())
  payComponentName               String               @db.VarChar(20)
  employeeSalary     EmployeeSalary[]
  employeeSalaryEdit EmployeeSalaryEdit[]
}

model EmployeeSalary {
  id         String @id @default(uuid())
  employeeId String

  componentId String
  component   PayComponent @relation(fields: [componentId], references: [id])

  type   PaymentType @default(regular)
  amount Decimal     @db.Decimal(13, 2)

  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  edits     EmployeeSalaryEdit[]
  employee  Employee             @relation(fields: [employeeId], references: [id])
  createdBy Admin                @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy Admin                @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model EmployeeSalaryEdit {
  id               String @id @default(uuid())
  employeeSalaryId String

  componentId String
  component   PayComponent @relation(fields: [componentId], references: [id])

  type   PaymentType @default(regular)
  amount Decimal     @db.Decimal(13, 2)

  requestType    RequestType
  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  createdBy      Admin           @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy      Admin           @relation("UpdatedBy", fields: [updatedById], references: [id])
  employeeSalary EmployeeSalary @relation(fields: [employeeSalaryId], references: [id])
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  activity  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id         String @id @default(uuid())
  jobOrderId String

  transactionName   String  @db.VarChar(100)
  mop    String  @db.VarChar(20)
  amount Decimal @db.Decimal(13, 2)

  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  edits     TransactionEdit[]
  jobOrder  JobOrder          @relation(fields: [jobOrderId], references: [id])
  createdBy User              @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy User              @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model TransactionEdit {
  id            String @id @default(uuid())
  transactionId String

  transactionName   String  @db.VarChar(100)
  mop    String  @db.VarChar(20)
  amount Decimal @db.Decimal(13, 2)

  requestType    RequestType
  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  transaction Transaction @relation(fields: [transactionId], references: [id])
  createdBy   User        @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy   User        @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model OtherIncome {
  id String @id @default(uuid())

  description String
  amount      Decimal @db.Decimal(13, 2)
  branchId    String
  branch      Branch  @relation(fields: [branchId], references: [id])

  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  edits     OtherIncomeEdit[]
  createdBy Admin             @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy Admin             @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model OtherIncomeEdit {
  id            String @id @default(uuid())
  otherIncomeId String

  description String
  amount      Decimal @db.Decimal(13, 2)
  branchId    String
  branch      Branch  @relation(fields: [branchId], references: [id])

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  otherIncome OtherIncome @relation(fields: [otherIncomeId], references: [id])
  createdBy   Admin        @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy   Admin        @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model Equipment {
  id String @id @default(uuid())

  equipmentName     String  @db.VarChar(100)
  quantity Int
  price    Decimal @db.Decimal(13, 2)
  branchId String

  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  edits EquipmentEdit[]

  branch    Branch @relation(fields: [branchId], references: [id])
  createdBy Admin  @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy Admin  @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model EquipmentEdit {
  id          String @id @default(uuid())
  equipmentId String

  equipmentName     String  @db.VarChar(100)
  quantity Int
  price    Decimal @db.Decimal(13, 2)
  branchId String

  requestType    RequestType
  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  branch    Branch    @relation(fields: [branchId], references: [id])
  equipment Equipment @relation(fields: [equipmentId], references: [id])
  createdBy Admin     @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy Admin     @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model Material {
  id         String @id @default(uuid())
  jobOrderId String

  materialName     String  @db.VarChar(100)
  quantity Int
  price    Decimal @db.Decimal(13, 2)

  createdAt DateTime @default(now())

  jobOrder JobOrder @relation(fields: [jobOrderId], references: [id])
}

enum OrderStatus {
  unassigned
  ongoing
  completed
  forRelease
}

model JobOrder {
  id String @id @default(uuid())

  jobOrderCode String @unique
  truckId      String
  branchId     String
  contractorId String

  status      OrderStatus
  description String
  labor       Decimal     @db.Decimal(13, 2)
  completedAt DateTime?

  transactions Transaction[]
  materials    Material[]

  approvalStatus ApprovalStatus @default(published)

  edits JobOrderEdit[]

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  truck      Truck      @relation(fields: [truckId], references: [id])
  branch     Branch     @relation(fields: [branchId], references: [id])
  contractor Contractor @relation(fields: [contractorId], references: [id])
  createdBy  User       @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy  User       @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model JobOrderEdit {
  id           String @id @default(uuid())
  jobOrderId   String
  jobOrderCode String @unique
  branchId     String

  status      OrderStatus
  description String
  labor       Decimal     @db.Decimal(13, 2)
  completedAt DateTime?

  requestType    RequestType
  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String
  branch      Branch   @relation(fields: [branchId], references: [id])

  jobOrder  JobOrder @relation(fields: [jobOrderId], references: [id])
  createdBy User     @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy User     @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model Overhead {
  id String @id @default(uuid())

  description String
  amount      Decimal @db.Decimal(13, 2)
  branchId    String

  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  edits OverheadEdit[]

  branch    Branch @relation(fields: [branchId], references: [id])
  createdBy Admin  @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy Admin  @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model OverheadEdit {
  id         String @id @default(uuid())
  overheadId String

  description String
  amount      Decimal @db.Decimal(13, 2)
  branchId    String

  requestType    RequestType
  approvalStatus ApprovalStatus @default(published)

  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @updatedAt
  updatedById String

  branch    Branch   @relation(fields: [branchId], references: [id])
  overhead  Overhead @relation(fields: [overheadId], references: [id])
  createdBy Admin    @relation("CreatedBy", fields: [createdById], references: [id])
  updatedBy Admin    @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user           User           @relation(fields: [userId], references: [id])
  role           Role           @relation(fields: [roleId], references: [id])
  approvalStatus ApprovalStatus @default(published)
}

model Role {
  id             String           @id @default(uuid())
  roleName           String           @db.VarChar(100)
  baseRoleId     String?
  baseRole       Role?             @relation("BaseRole", fields: [baseRoleId], references: [id])
  baseRoles      Role[]           @relation("BaseRole")
  isCustom       Boolean?
  users          UserRole[]
  permissions    RolePermission[]
  approvalStatus ApprovalStatus @default(published)

  createdById String?
  createdBy   User?   @relation("CreatedBy", fields: [createdById], references: [id])
}

model Permission {
  id          String           @id @default(uuid())
  module      String           @db.VarChar(100)
  action      String           @db.VarChar(100)
  method      Method
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String

  approval Boolean

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])
}

model ApprovalLog {
  id              String @id @default(uuid())
  module          Module
  table           TableName
  moduleId String
  requestComment  String
  responseComment String
}


// enum

enum ApprovalStatus {
  pending
  published
  rejected
}

enum RequestType {
  edit
  delete
}

enum PaymentType {
  regular
  advance
}

enum Method {
  view
  create
  edit
  delete
}

enum Module {
  Job_Orders @map("Job Orders")
  Other_Income @map("Other_Income")
  Transaction @map("Transaction")
  Finances_Revenue_And_Profit @map("Finances - Revenue and Profit")
  Finances_Operational_Material @map("Finances - Operational - Material")
  Finances_Operational_Equipment @map("Finances - Operational - Equipment")
  Finances_Operational_Labor @map("Finances - Operational - Labor")
  Finances_Overhead @map("Finances - Overhead")
  Trucks @map("Trucks")
  Activity_Logs @map("Activity Logs")
  Users_All_Users @map("Users - All Users")
  Users_Roles_And_Permissions @map("Users - Roles and Permissions")
}

enum TableName {
  Dashboard 
  Job_Orders @map("Job Orders")
  Other_Incomes @map("Other_Incomes")
  Transactions @map("Transactions")
  Revenue_And_Profit @map("Revenue and Profit")
  Material_Expenses @map("Material Expenses")
  Equipment_Expenses @map("Equipment Expenses")
  Labor_Expenses @map("Labor Expenses")
  Trucks
  Activity_Logs @map("Activity Logs")
  All_Users @map("All Users")
  Roles_And_Permissions @map("Roles and Permissions")
  My_Profile @map("My Profile")
  My_Dashboard @map("My Dashboard")
  Assigned_Orders @map("Assigned Orders")
  My_Payout @map("My Payout")
  My_Orders
  My_Transactions
  My_Trucks
  My_Salary
  Profile

}
