generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activitylog {
  id        String   @id
  userName  String
  activity  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userName], references: [username], map: "ActivityLog_userName_fkey")

  @@index([userName], map: "ActivityLog_userName_fkey")
}

model admin {
  id     String @id
  userId String @unique(map: "Admin_userId_key")
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Admin_userId_fkey")
}

model approvallog {
  id              String             @id
  module          approvallog_module
  table           approvallog_table
  moduleId        String
  requestComment  String
  responseComment String
}

model branch {
  id                              String            @id
  branchName                      String            @unique(map: "Branch_branchName_key") @db.VarChar(100)
  description                     String?
  address                         String
  createdAt                       DateTime          @default(now())
  createdByUser                   String
  updatedAt                       DateTime
  updatedByUser                   String
  user_branch_createdByUserTouser user              @relation("branch_createdByUserTouser", fields: [createdByUser], references: [username], map: "Branch_createdByUser_fkey")
  user_branch_updatedByUserTouser user              @relation("branch_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "Branch_updatedByUser_fkey")
  branchedit                      branchedit[]
  equipment                       equipment[]
  equipmentedit                   equipmentedit[]
  joborder                        joborder[]
  joborderedit                    joborderedit[]
  otherincome                     otherincome[]
  otherincomeedit                 otherincomeedit[]
  overhead                        overhead[]
  overheadedit                    overheadedit[]
  userbranch                      userbranch[]
  userbranchedit                  userbranchedit[]

  @@index([createdByUser], map: "Branch_createdByUser_fkey")
  @@index([updatedByUser], map: "Branch_updatedByUser_fkey")
}

model branchedit {
  id                                  String                    @id
  branchId                            String?
  branchName                          String                    @db.VarChar(100)
  description                         String?
  address                             String
  requestType                         branchedit_requestType
  approvalStatus                      branchedit_approvalStatus @default(pending)
  createdAt                           DateTime                  @default(now())
  createdByUser                       String
  updatedAt                           DateTime?
  updatedByUser                       String
  branch                              branch?                   @relation(fields: [branchId], references: [id], map: "BranchEdit_branchId_fkey")
  user_branchedit_createdByUserTouser user                      @relation("branchedit_createdByUserTouser", fields: [createdByUser], references: [username], map: "BranchEdit_createdByUser_fkey")
  user_branchedit_updatedByUserTouser user                      @relation("branchedit_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "BranchEdit_updatedByUser_fkey")

  @@index([branchId], map: "BranchEdit_branchId_fkey")
  @@index([createdByUser], map: "BranchEdit_createdByUser_fkey")
  @@index([updatedByUser], map: "BranchEdit_updatedByUser_fkey")
}

model component {
  id            String         @id
  componentName String
  paycomponent  paycomponent[]
}

model contractor {
  id                String              @id
  userId            String              @unique(map: "Contractor_userId_key")
  commission        Decimal             @db.Decimal(13, 2)
  user              user                @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Contractor_userId_fkey")
  contractorpay     contractorpay[]
  contractorpayedit contractorpayedit[]
  joborder          joborder[]
  joborderedit      joborderedit[]
}

model contractorpay {
  id                                     String              @id
  contractorId                           String
  type                                   contractorpay_type
  amount                                 Decimal             @db.Decimal(13, 2)
  createdAt                              DateTime            @default(now())
  createdByUser                          String
  updatedAt                              DateTime
  updatedByUser                          String
  contractor                             contractor          @relation(fields: [contractorId], references: [id], map: "ContractorPay_contractorId_fkey")
  user_contractorpay_createdByUserTouser user                @relation("contractorpay_createdByUserTouser", fields: [createdByUser], references: [username], map: "ContractorPay_createdByUser_fkey")
  user_contractorpay_updatedByUserTouser user                @relation("contractorpay_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "ContractorPay_updatedByUser_fkey")
  contractorpayedit                      contractorpayedit[]

  @@index([contractorId], map: "ContractorPay_contractorId_fkey")
  @@index([createdByUser], map: "ContractorPay_createdByUser_fkey")
  @@index([updatedByUser], map: "ContractorPay_updatedByUser_fkey")
}

model contractorpayedit {
  id                                         String                           @id
  contractorPayId                            String?
  contractorId                               String
  type                                       contractorpayedit_type
  amount                                     Decimal                          @db.Decimal(13, 2)
  requestType                                contractorpayedit_requestType
  approvalStatus                             contractorpayedit_approvalStatus @default(pending)
  createdAt                                  DateTime                         @default(now())
  createdByUser                              String
  updatedAt                                  DateTime
  updatedByUser                              String
  contractor                                 contractor                       @relation(fields: [contractorId], references: [id], map: "ContractorPayEdit_contractorId_fkey")
  contractorpay                              contractorpay?                   @relation(fields: [contractorPayId], references: [id], map: "ContractorPayEdit_contractorPayId_fkey")
  user_contractorpayedit_createdByUserTouser user                             @relation("contractorpayedit_createdByUserTouser", fields: [createdByUser], references: [username], map: "ContractorPayEdit_createdByUser_fkey")
  user_contractorpayedit_updatedByUserTouser user                             @relation("contractorpayedit_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "ContractorPayEdit_updatedByUser_fkey")

  @@index([contractorId], map: "ContractorPayEdit_contractorId_fkey")
  @@index([contractorPayId], map: "ContractorPayEdit_contractorPayId_fkey")
  @@index([createdByUser], map: "ContractorPayEdit_createdByUser_fkey")
  @@index([updatedByUser], map: "ContractorPayEdit_updatedByUser_fkey")
}

model customer {
  id                 String               @id
  userId             String               @unique(map: "Customer_userId_key")
  user               user                 @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Customer_userId_fkey")
  joborder           joborder[]
  joborderedit       joborderedit[]
  truckownership     truckownership[]
  truckownershipedit truckownershipedit[]
}

model employee {
  id                 String               @id
  userId             String               @unique(map: "Employee_userId_key")
  user               user                 @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Employee_userId_fkey")
  employeepay        employeepay[]
  employeesalary     employeesalary[]
  employeesalaryedit employeesalaryedit[]
}

model employeepay {
  id                                   String           @id
  employeeId                           String
  createdAt                            DateTime         @default(now())
  createdByUser                        String
  updatedAt                            DateTime
  updatedByUser                        String
  type                                 employeepay_type @default(regular)
  user_employeepay_createdByUserTouser user             @relation("employeepay_createdByUserTouser", fields: [createdByUser], references: [username], map: "EmployeePay_createdByUser_fkey")
  employee                             employee         @relation(fields: [employeeId], references: [id], map: "EmployeePay_employeeId_fkey")
  user_employeepay_updatedByUserTouser user             @relation("employeepay_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "EmployeePay_updatedByUser_fkey")
  paycomponent                         paycomponent[]

  @@index([createdByUser], map: "EmployeePay_createdByUser_fkey")
  @@index([employeeId], map: "EmployeePay_employeeId_fkey")
  @@index([updatedByUser], map: "EmployeePay_updatedByUser_fkey")
}

model employeesalary {
  id                                      String                        @id
  employeeId                              String
  componentId                             String
  type                                    employeesalary_type           @default(regular)
  amount                                  Decimal                       @db.Decimal(13, 2)
  approvalStatus                          employeesalary_approvalStatus @default(pending)
  createdAt                               DateTime                      @default(now())
  createdByUser                           String
  updatedAt                               DateTime
  updatedByUser                           String
  user_employeesalary_createdByUserTouser user                          @relation("employeesalary_createdByUserTouser", fields: [createdByUser], references: [username], map: "EmployeeSalary_createdByUser_fkey")
  employee                                employee                      @relation(fields: [employeeId], references: [id], map: "EmployeeSalary_employeeId_fkey")
  user_employeesalary_updatedByUserTouser user                          @relation("employeesalary_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "EmployeeSalary_updatedByUser_fkey")
  employeesalaryedit                      employeesalaryedit[]

  @@index([createdByUser], map: "EmployeeSalary_createdByUser_fkey")
  @@index([employeeId], map: "EmployeeSalary_employeeId_fkey")
  @@index([updatedByUser], map: "EmployeeSalary_updatedByUser_fkey")
}

model employeesalaryedit {
  id                                          String                            @id
  employeeSalaryId                            String
  componentId                                 String
  type                                        employeesalaryedit_type           @default(regular)
  amount                                      Decimal                           @db.Decimal(13, 2)
  requestType                                 employeesalaryedit_requestType
  approvalStatus                              employeesalaryedit_approvalStatus @default(pending)
  createdAt                                   DateTime                          @default(now())
  createdByUser                               String
  updatedAt                                   DateTime
  updatedByUser                               String
  employeeId                                  String
  user_employeesalaryedit_createdByUserTouser user                              @relation("employeesalaryedit_createdByUserTouser", fields: [createdByUser], references: [username], map: "EmployeeSalaryEdit_createdByUser_fkey")
  employee                                    employee                          @relation(fields: [employeeId], references: [id], map: "EmployeeSalaryEdit_employeeId_fkey")
  employeesalary                              employeesalary                    @relation(fields: [employeeSalaryId], references: [id], map: "EmployeeSalaryEdit_employeeSalaryId_fkey")
  user_employeesalaryedit_updatedByUserTouser user                              @relation("employeesalaryedit_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "EmployeeSalaryEdit_updatedByUser_fkey")

  @@index([createdByUser], map: "EmployeeSalaryEdit_createdByUser_fkey")
  @@index([employeeId], map: "EmployeeSalaryEdit_employeeId_fkey")
  @@index([employeeSalaryId], map: "EmployeeSalaryEdit_employeeSalaryId_fkey")
  @@index([updatedByUser], map: "EmployeeSalaryEdit_updatedByUser_fkey")
}

model equipment {
  id                                 String          @id
  equipmentName                      String          @db.VarChar(100)
  quantity                           Int
  price                              Decimal         @db.Decimal(13, 2)
  branchId                           String
  createdAt                          DateTime        @default(now())
  createdByUser                      String
  updatedAt                          DateTime
  updatedByUser                      String
  branch                             branch          @relation(fields: [branchId], references: [id], map: "Equipment_branchId_fkey")
  user_equipment_createdByUserTouser user            @relation("equipment_createdByUserTouser", fields: [createdByUser], references: [username], map: "Equipment_createdByUser_fkey")
  user_equipment_updatedByUserTouser user            @relation("equipment_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "Equipment_updatedByUser_fkey")
  equipmentedit                      equipmentedit[]

  @@index([branchId], map: "Equipment_branchId_fkey")
  @@index([createdByUser], map: "Equipment_createdByUser_fkey")
  @@index([updatedByUser], map: "Equipment_updatedByUser_fkey")
}

model equipmentedit {
  id                                     String                       @id
  equipmentId                            String?
  equipmentName                          String                       @db.VarChar(100)
  quantity                               Int
  price                                  Decimal                      @db.Decimal(13, 2)
  branchId                               String
  requestType                            equipmentedit_requestType
  approvalStatus                         equipmentedit_approvalStatus @default(pending)
  createdAt                              DateTime                     @default(now())
  createdByUser                          String
  updatedAt                              DateTime
  updatedByUser                          String
  branch                                 branch                       @relation(fields: [branchId], references: [id], map: "EquipmentEdit_branchId_fkey")
  user_equipmentedit_createdByUserTouser user                         @relation("equipmentedit_createdByUserTouser", fields: [createdByUser], references: [username], map: "EquipmentEdit_createdByUser_fkey")
  equipment                              equipment?                   @relation(fields: [equipmentId], references: [id], map: "EquipmentEdit_equipmentId_fkey")
  user_equipmentedit_updatedByUserTouser user                         @relation("equipmentedit_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "EquipmentEdit_updatedByUser_fkey")

  @@index([branchId], map: "EquipmentEdit_branchId_fkey")
  @@index([createdByUser], map: "EquipmentEdit_createdByUser_fkey")
  @@index([equipmentId], map: "EquipmentEdit_equipmentId_fkey")
  @@index([updatedByUser], map: "EquipmentEdit_updatedByUser_fkey")
}

model joborder {
  id                                String          @id
  jobOrderCode                      String          @unique(map: "JobOrder_jobOrderCode_key")
  truckId                           String
  branchId                          String
  customerId                        String
  contractorId                      String?
  status                            joborder_status @default(pending)
  description                       String
  labor                             Decimal?        @db.Decimal(13, 2)
  contractorPercent                 Decimal?        @db.Decimal(13, 2)
  completedAt                       DateTime?
  createdAt                         DateTime        @default(now())
  createdByUser                     String
  updatedAt                         DateTime
  updatedByUser                     String
  branch                            branch          @relation(fields: [branchId], references: [id], map: "JobOrder_branchId_fkey")
  contractor                        contractor?     @relation(fields: [contractorId], references: [id], map: "JobOrder_contractorId_fkey")
  user_joborder_createdByUserTouser user            @relation("joborder_createdByUserTouser", fields: [createdByUser], references: [username], map: "JobOrder_createdByUser_fkey")
  customer                          customer        @relation(fields: [customerId], references: [id], map: "JobOrder_customerId_fkey")
  truck                             truck           @relation(fields: [truckId], references: [id], onDelete: Cascade, map: "JobOrder_truckId_fkey")
  user_joborder_updatedByUserTouser user            @relation("joborder_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "JobOrder_updatedByUser_fkey")
  joborderedit                      joborderedit[]
  material                          material[]
  materialedit                      materialedit[]
  transaction                       transaction[]
  transactionz                      transactionz[]

  @@index([branchId], map: "JobOrder_branchId_fkey")
  @@index([contractorId], map: "JobOrder_contractorId_fkey")
  @@index([createdByUser], map: "JobOrder_createdByUser_fkey")
  @@index([customerId], map: "JobOrder_customerId_fkey")
  @@index([truckId], map: "JobOrder_truckId_fkey")
  @@index([updatedByUser], map: "JobOrder_updatedByUser_fkey")
}

model joborderedit {
  id                                    String                      @id
  jobOrderId                            String?
  jobOrderCode                          String?
  branchId                              String
  truckId                               String
  customerId                            String
  contractorId                          String?
  status                                joborderedit_status         @default(pending)
  description                           String
  labor                                 Decimal?                    @db.Decimal(13, 2)
  contractorPercent                     Decimal?                    @db.Decimal(13, 2)
  completedAt                           DateTime?
  requestType                           joborderedit_requestType
  approvalStatus                        joborderedit_approvalStatus @default(pending)
  createdAt                             DateTime                    @default(now())
  createdByUser                         String
  updatedAt                             DateTime
  updatedByUser                         String
  branch                                branch                      @relation(fields: [branchId], references: [id], map: "JobOrderEdit_branchId_fkey")
  contractor                            contractor?                 @relation(fields: [contractorId], references: [id], map: "JobOrderEdit_contractorId_fkey")
  user_joborderedit_createdByUserTouser user                        @relation("joborderedit_createdByUserTouser", fields: [createdByUser], references: [username], map: "JobOrderEdit_createdByUser_fkey")
  customer                              customer                    @relation(fields: [customerId], references: [id], map: "JobOrderEdit_customerId_fkey")
  joborder                              joborder?                   @relation(fields: [jobOrderId], references: [id], map: "JobOrderEdit_jobOrderId_fkey")
  truck                                 truck                       @relation(fields: [truckId], references: [id], onDelete: Cascade, map: "JobOrderEdit_truckId_fkey")
  user_joborderedit_updatedByUserTouser user                        @relation("joborderedit_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "JobOrderEdit_updatedByUser_fkey")

  @@index([branchId], map: "JobOrderEdit_branchId_fkey")
  @@index([contractorId], map: "JobOrderEdit_contractorId_fkey")
  @@index([createdByUser], map: "JobOrderEdit_createdByUser_fkey")
  @@index([customerId], map: "JobOrderEdit_customerId_fkey")
  @@index([jobOrderId], map: "JobOrderEdit_jobOrderId_fkey")
  @@index([truckId], map: "JobOrderEdit_truckId_fkey")
  @@index([updatedByUser], map: "JobOrderEdit_updatedByUser_fkey")
}

model material {
  id           String   @id
  jobOrderId   String
  materialName String   @db.VarChar(100)
  quantity     Int
  price        Decimal  @db.Decimal(13, 2)
  createdAt    DateTime @default(now())
  joborder     joborder @relation(fields: [jobOrderId], references: [id], map: "Material_jobOrderId_fkey")

  @@index([jobOrderId], map: "Material_jobOrderId_fkey")
}

model materialedit {
  id             String                      @id
  jobOrderId     String?
  materialName   String                      @db.VarChar(100)
  quantity       Int
  price          Decimal                     @db.Decimal(13, 2)
  requestType    materialedit_requestType
  approvalStatus materialedit_approvalStatus @default(pending)
  createdAt      DateTime                    @default(now())
  joborder       joborder?                   @relation(fields: [jobOrderId], references: [id], map: "MaterialEdit_jobOrderId_fkey")

  @@index([jobOrderId], map: "MaterialEdit_jobOrderId_fkey")
}

model otherincome {
  id                                   String            @id
  description                          String
  amount                               Decimal           @db.Decimal(13, 2)
  branchId                             String
  createdAt                            DateTime          @default(now())
  createdByUser                        String
  updatedAt                            DateTime
  updatedByUser                        String
  branch                               branch            @relation(fields: [branchId], references: [id], map: "OtherIncome_branchId_fkey")
  user_otherincome_createdByUserTouser user              @relation("otherincome_createdByUserTouser", fields: [createdByUser], references: [username], map: "OtherIncome_createdByUser_fkey")
  user_otherincome_updatedByUserTouser user              @relation("otherincome_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "OtherIncome_updatedByUser_fkey")
  otherincomeedit                      otherincomeedit[]

  @@index([branchId], map: "OtherIncome_branchId_fkey")
  @@index([createdByUser], map: "OtherIncome_createdByUser_fkey")
  @@index([updatedByUser], map: "OtherIncome_updatedByUser_fkey")
}

model otherincomeedit {
  id                                       String                         @id
  otherIncomeId                            String?
  description                              String
  amount                                   Decimal                        @db.Decimal(13, 2)
  branchId                                 String
  requestType                              otherincomeedit_requestType
  approvalStatus                           otherincomeedit_approvalStatus @default(pending)
  createdAt                                DateTime                       @default(now())
  createdByUser                            String
  updatedAt                                DateTime
  updatedByUser                            String
  branch                                   branch                         @relation(fields: [branchId], references: [id], map: "OtherIncomeEdit_branchId_fkey")
  user_otherincomeedit_createdByUserTouser user                           @relation("otherincomeedit_createdByUserTouser", fields: [createdByUser], references: [username], map: "OtherIncomeEdit_createdByUser_fkey")
  otherincome                              otherincome?                   @relation(fields: [otherIncomeId], references: [id], map: "OtherIncomeEdit_otherIncomeId_fkey")
  user_otherincomeedit_updatedByUserTouser user                           @relation("otherincomeedit_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "OtherIncomeEdit_updatedByUser_fkey")

  @@index([branchId], map: "OtherIncomeEdit_branchId_fkey")
  @@index([createdByUser], map: "OtherIncomeEdit_createdByUser_fkey")
  @@index([otherIncomeId], map: "OtherIncomeEdit_otherIncomeId_fkey")
  @@index([updatedByUser], map: "OtherIncomeEdit_updatedByUser_fkey")
}

model overhead {
  id                                String         @id
  description                       String
  amount                            Decimal        @db.Decimal(13, 2)
  branchId                          String
  createdAt                         DateTime       @default(now())
  createdByUser                     String
  updatedAt                         DateTime
  updatedByUser                     String
  branch                            branch         @relation(fields: [branchId], references: [id], map: "Overhead_branchId_fkey")
  user_overhead_createdByUserTouser user           @relation("overhead_createdByUserTouser", fields: [createdByUser], references: [username], map: "Overhead_createdByUser_fkey")
  user_overhead_updatedByUserTouser user           @relation("overhead_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "Overhead_updatedByUser_fkey")
  overheadedit                      overheadedit[]

  @@index([branchId], map: "Overhead_branchId_fkey")
  @@index([createdByUser], map: "Overhead_createdByUser_fkey")
  @@index([updatedByUser], map: "Overhead_updatedByUser_fkey")
}

model overheadedit {
  id                                    String                      @id
  overheadId                            String
  description                           String
  amount                                Decimal                     @db.Decimal(13, 2)
  branchId                              String
  requestType                           overheadedit_requestType
  approvalStatus                        overheadedit_approvalStatus @default(pending)
  createdAt                             DateTime                    @default(now())
  createdByUser                         String
  updatedAt                             DateTime
  updatedByUser                         String
  branch                                branch                      @relation(fields: [branchId], references: [id], map: "OverheadEdit_branchId_fkey")
  user_overheadedit_createdByUserTouser user                        @relation("overheadedit_createdByUserTouser", fields: [createdByUser], references: [username], map: "OverheadEdit_createdByUser_fkey")
  overhead                              overhead                    @relation(fields: [overheadId], references: [id], map: "OverheadEdit_overheadId_fkey")
  user_overheadedit_updatedByUserTouser user                        @relation("overheadedit_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "OverheadEdit_updatedByUser_fkey")

  @@index([branchId], map: "OverheadEdit_branchId_fkey")
  @@index([createdByUser], map: "OverheadEdit_createdByUser_fkey")
  @@index([overheadId], map: "OverheadEdit_overheadId_fkey")
  @@index([updatedByUser], map: "OverheadEdit_updatedByUser_fkey")
}

model paycomponent {
  id                                    String      @id
  amount                                Decimal     @db.Decimal(13, 2)
  componentId                           String
  createdAt                             DateTime    @default(now())
  createdByUser                         String
  employeePayId                         String
  updatedAt                             DateTime
  updatedByUser                         String
  component                             component   @relation(fields: [componentId], references: [id], map: "PayComponent_componentId_fkey")
  user_paycomponent_createdByUserTouser user        @relation("paycomponent_createdByUserTouser", fields: [createdByUser], references: [username], map: "PayComponent_createdByUser_fkey")
  employeepay                           employeepay @relation(fields: [employeePayId], references: [id], map: "PayComponent_employeePayId_fkey")
  user_paycomponent_updatedByUserTouser user        @relation("paycomponent_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "PayComponent_updatedByUser_fkey")

  @@index([componentId], map: "PayComponent_componentId_fkey")
  @@index([createdByUser], map: "PayComponent_createdByUser_fkey")
  @@index([employeePayId], map: "PayComponent_employeePayId_fkey")
  @@index([updatedByUser], map: "PayComponent_updatedByUser_fkey")
}

model permission {
  id             String            @id
  module         permission_module
  permissionName String            @unique(map: "Permission_permissionName_key") @db.VarChar(100)
  method         permission_method
  description    String?
  rolepermission rolepermission[]
}

model role {
  id             String           @id
  roleName       String           @unique(map: "Role_roleName_key") @db.VarChar(100)
  baseRoleId     String?
  isCustom       Boolean?
  createdByUser  String?
  role           role?            @relation("roleTorole", fields: [baseRoleId], references: [id], onDelete: Cascade, map: "Role_baseRoleId_fkey")
  other_role     role[]           @relation("roleTorole")
  user           user?            @relation(fields: [createdByUser], references: [username], onDelete: Restrict, map: "Role_createdByUser_fkey")
  rolepermission rolepermission[]
  userrole       userrole[]
  userroleedit   userroleedit[]

  @@index([baseRoleId], map: "Role_baseRoleId_fkey")
  @@index([createdByUser], map: "Role_createdByUser_fkey")
}

model rolepermission {
  id           String     @id
  roleId       String
  permissionId String
  approval     Boolean
  permission   permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, map: "RolePermission_permissionId_fkey")
  role         role       @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "RolePermission_roleId_fkey")

  @@unique([roleId, permissionId], map: "RolePermission_roleId_permissionId_key")
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model transaction {
  id                                   String             @id
  mop                                  String?            @db.VarChar(20)
  amount                               Decimal            @db.Decimal(13, 2)
  createdAt                            DateTime           @default(now())
  createdByUser                        String?
  updatedAt                            DateTime
  updatedByUser                        String?
  email                                String?
  jobOrderCode                         String
  referenceNumber                      String?
  senderName                           String             @db.VarChar(100)
  sessionId                            String?            @unique(map: "Transaction_sessionId_key")
  status                               transaction_status @default(pending)
  user_transaction_createdByUserTouser user?              @relation("transaction_createdByUserTouser", fields: [createdByUser], references: [username], onDelete: Restrict, map: "Transaction_createdByUser_fkey")
  joborder                             joborder           @relation(fields: [jobOrderCode], references: [jobOrderCode], map: "Transaction_jobOrderCode_fkey")
  user_transaction_updatedByUserTouser user?              @relation("transaction_updatedByUserTouser", fields: [updatedByUser], references: [username], onDelete: Restrict, map: "Transaction_updatedByUser_fkey")

  @@index([createdByUser], map: "Transaction_createdByUser_fkey")
  @@index([jobOrderCode], map: "Transaction_jobOrderCode_fkey")
  @@index([updatedByUser], map: "Transaction_updatedByUser_fkey")
}

model transactioneditz {
  id                                        String                          @id
  transactionId                             String
  transactionName                           String                          @db.VarChar(100)
  mop                                       String                          @db.VarChar(20)
  amount                                    Decimal                         @db.Decimal(13, 2)
  requestType                               transactioneditz_requestType
  approvalStatus                            transactioneditz_approvalStatus @default(pending)
  createdAt                                 DateTime                        @default(now())
  createdByUser                             String
  updatedAt                                 DateTime
  updatedByUser                             String
  user_transactioneditz_createdByUserTouser user                            @relation("transactioneditz_createdByUserTouser", fields: [createdByUser], references: [username], map: "TransactionEditZ_createdByUser_fkey")
  transactionz                              transactionz                    @relation(fields: [transactionId], references: [id], map: "TransactionEditZ_transactionId_fkey")
  user_transactioneditz_updatedByUserTouser user                            @relation("transactioneditz_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "TransactionEditZ_updatedByUser_fkey")

  @@index([createdByUser], map: "TransactionEditZ_createdByUser_fkey")
  @@index([transactionId], map: "TransactionEditZ_transactionId_fkey")
  @@index([updatedByUser], map: "TransactionEditZ_updatedByUser_fkey")
}

model transactionz {
  id                                    String                      @id
  jobOrderId                            String
  transactionName                       String                      @db.VarChar(100)
  mop                                   String                      @db.VarChar(20)
  amount                                Decimal                     @db.Decimal(13, 2)
  approvalStatus                        transactionz_approvalStatus @default(pending)
  createdAt                             DateTime                    @default(now())
  createdByUser                         String
  updatedAt                             DateTime
  updatedByUser                         String
  transactioneditz                      transactioneditz[]
  user_transactionz_createdByUserTouser user                        @relation("transactionz_createdByUserTouser", fields: [createdByUser], references: [username], map: "TransactionZ_createdByUser_fkey")
  joborder                              joborder                    @relation(fields: [jobOrderId], references: [id], map: "TransactionZ_jobOrderId_fkey")
  user_transactionz_updatedByUserTouser user                        @relation("transactionz_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "TransactionZ_updatedByUser_fkey")

  @@index([createdByUser], map: "TransactionZ_createdByUser_fkey")
  @@index([jobOrderId], map: "TransactionZ_jobOrderId_fkey")
  @@index([updatedByUser], map: "TransactionZ_updatedByUser_fkey")
}

model truck {
  id                             String               @id
  plate                          String               @unique(map: "Truck_plate_key") @db.VarChar(10)
  make                           String               @db.VarChar(20)
  model                          String               @db.VarChar(20)
  createdAt                      DateTime             @default(now())
  createdByUser                  String
  updatedAt                      DateTime
  updatedByUser                  String
  joborder                       joborder[]
  joborderedit                   joborderedit[]
  user_truck_createdByUserTouser user                 @relation("truck_createdByUserTouser", fields: [createdByUser], references: [username], map: "Truck_createdByUser_fkey")
  user_truck_updatedByUserTouser user                 @relation("truck_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "Truck_updatedByUser_fkey")
  truckedit                      truckedit[]
  truckownership                 truckownership[]
  truckownershipedit             truckownershipedit[]

  @@index([createdByUser], map: "Truck_createdByUser_fkey")
  @@index([updatedByUser], map: "Truck_updatedByUser_fkey")
}

model truckedit {
  id                                 String                   @id
  truckId                            String?
  plate                              String                   @db.VarChar(10)
  make                               String                   @db.VarChar(20)
  model                              String                   @db.VarChar(20)
  approvalStatus                     truckedit_approvalStatus @default(pending)
  requestType                        truckedit_requestType    @default(create)
  createdAt                          DateTime                 @default(now())
  createdByUser                      String
  updatedAt                          DateTime
  updatedByUser                      String
  user_truckedit_createdByUserTouser user                     @relation("truckedit_createdByUserTouser", fields: [createdByUser], references: [username], map: "TruckEdit_createdByUser_fkey")
  truck                              truck?                   @relation(fields: [truckId], references: [id], onDelete: Cascade, map: "TruckEdit_truckId_fkey")
  user_truckedit_updatedByUserTouser user                     @relation("truckedit_updatedByUserTouser", fields: [updatedByUser], references: [username], map: "TruckEdit_updatedByUser_fkey")

  @@index([createdByUser], map: "TruckEdit_createdByUser_fkey")
  @@index([truckId], map: "TruckEdit_truckId_fkey")
  @@index([updatedByUser], map: "TruckEdit_updatedByUser_fkey")
}

model truckownership {
  id                String    @id
  truckId           String
  customerId        String
  transferredByUser String
  startDate         DateTime  @default(now())
  endDate           DateTime?
  customer          customer  @relation(fields: [customerId], references: [id], map: "TruckOwnership_customerId_fkey")
  user              user      @relation(fields: [transferredByUser], references: [username], map: "TruckOwnership_transferredByUser_fkey")
  truck             truck     @relation(fields: [truckId], references: [id], onDelete: Cascade, map: "TruckOwnership_truckId_fkey")

  @@index([customerId], map: "TruckOwnership_customerId_fkey")
  @@index([transferredByUser], map: "TruckOwnership_transferredByUser_fkey")
  @@index([truckId], map: "TruckOwnership_truckId_fkey")
}

model truckownershipedit {
  id                String                            @id
  truckId           String
  customerId        String
  requestType       truckownershipedit_requestType
  transferredByUser String
  startDate         DateTime                          @default(now())
  endDate           DateTime?
  approvalStatus    truckownershipedit_approvalStatus @default(pending)
  customer          customer                          @relation(fields: [customerId], references: [id], map: "TruckOwnershipEdit_customerId_fkey")
  user              user                              @relation(fields: [transferredByUser], references: [username], map: "TruckOwnershipEdit_transferredByUser_fkey")
  truck             truck                             @relation(fields: [truckId], references: [id], onDelete: Cascade, map: "TruckOwnershipEdit_truckId_fkey")

  @@index([customerId], map: "TruckOwnershipEdit_customerId_fkey")
  @@index([transferredByUser], map: "TruckOwnershipEdit_transferredByUser_fkey")
  @@index([truckId], map: "TruckOwnershipEdit_truckId_fkey")
}

model user {
  id                                                        String               @id
  fullName                                                  String               @db.VarChar(100)
  username                                                  String               @unique(map: "User_username_key") @db.VarChar(100)
  phone                                                     String               @db.VarChar(13)
  email                                                     String               @unique(map: "User_email_key") @db.VarChar(100)
  hashPwd                                                   String               @db.VarChar(255)
  description                                               String?
  refreshToken                                              String?
  createdAt                                                 DateTime             @default(now())
  createdByUser                                             String?
  updatedAt                                                 DateTime
  updatedByUser                                             String?
  status                                                    user_status?
  activitylog                                               activitylog[]
  admin                                                     admin?
  branch_branch_createdByUserTouser                         branch[]             @relation("branch_createdByUserTouser")
  branch_branch_updatedByUserTouser                         branch[]             @relation("branch_updatedByUserTouser")
  branchedit_branchedit_createdByUserTouser                 branchedit[]         @relation("branchedit_createdByUserTouser")
  branchedit_branchedit_updatedByUserTouser                 branchedit[]         @relation("branchedit_updatedByUserTouser")
  contractor                                                contractor?
  contractorpay_contractorpay_createdByUserTouser           contractorpay[]      @relation("contractorpay_createdByUserTouser")
  contractorpay_contractorpay_updatedByUserTouser           contractorpay[]      @relation("contractorpay_updatedByUserTouser")
  contractorpayedit_contractorpayedit_createdByUserTouser   contractorpayedit[]  @relation("contractorpayedit_createdByUserTouser")
  contractorpayedit_contractorpayedit_updatedByUserTouser   contractorpayedit[]  @relation("contractorpayedit_updatedByUserTouser")
  customer                                                  customer?
  employee                                                  employee?
  employeepay_employeepay_createdByUserTouser               employeepay[]        @relation("employeepay_createdByUserTouser")
  employeepay_employeepay_updatedByUserTouser               employeepay[]        @relation("employeepay_updatedByUserTouser")
  employeesalary_employeesalary_createdByUserTouser         employeesalary[]     @relation("employeesalary_createdByUserTouser")
  employeesalary_employeesalary_updatedByUserTouser         employeesalary[]     @relation("employeesalary_updatedByUserTouser")
  employeesalaryedit_employeesalaryedit_createdByUserTouser employeesalaryedit[] @relation("employeesalaryedit_createdByUserTouser")
  employeesalaryedit_employeesalaryedit_updatedByUserTouser employeesalaryedit[] @relation("employeesalaryedit_updatedByUserTouser")
  equipment_equipment_createdByUserTouser                   equipment[]          @relation("equipment_createdByUserTouser")
  equipment_equipment_updatedByUserTouser                   equipment[]          @relation("equipment_updatedByUserTouser")
  equipmentedit_equipmentedit_createdByUserTouser           equipmentedit[]      @relation("equipmentedit_createdByUserTouser")
  equipmentedit_equipmentedit_updatedByUserTouser           equipmentedit[]      @relation("equipmentedit_updatedByUserTouser")
  joborder_joborder_createdByUserTouser                     joborder[]           @relation("joborder_createdByUserTouser")
  joborder_joborder_updatedByUserTouser                     joborder[]           @relation("joborder_updatedByUserTouser")
  joborderedit_joborderedit_createdByUserTouser             joborderedit[]       @relation("joborderedit_createdByUserTouser")
  joborderedit_joborderedit_updatedByUserTouser             joborderedit[]       @relation("joborderedit_updatedByUserTouser")
  otherincome_otherincome_createdByUserTouser               otherincome[]        @relation("otherincome_createdByUserTouser")
  otherincome_otherincome_updatedByUserTouser               otherincome[]        @relation("otherincome_updatedByUserTouser")
  otherincomeedit_otherincomeedit_createdByUserTouser       otherincomeedit[]    @relation("otherincomeedit_createdByUserTouser")
  otherincomeedit_otherincomeedit_updatedByUserTouser       otherincomeedit[]    @relation("otherincomeedit_updatedByUserTouser")
  overhead_overhead_createdByUserTouser                     overhead[]           @relation("overhead_createdByUserTouser")
  overhead_overhead_updatedByUserTouser                     overhead[]           @relation("overhead_updatedByUserTouser")
  overheadedit_overheadedit_createdByUserTouser             overheadedit[]       @relation("overheadedit_createdByUserTouser")
  overheadedit_overheadedit_updatedByUserTouser             overheadedit[]       @relation("overheadedit_updatedByUserTouser")
  paycomponent_paycomponent_createdByUserTouser             paycomponent[]       @relation("paycomponent_createdByUserTouser")
  paycomponent_paycomponent_updatedByUserTouser             paycomponent[]       @relation("paycomponent_updatedByUserTouser")
  role                                                      role[]
  transaction_transaction_createdByUserTouser               transaction[]        @relation("transaction_createdByUserTouser")
  transaction_transaction_updatedByUserTouser               transaction[]        @relation("transaction_updatedByUserTouser")
  transactioneditz_transactioneditz_createdByUserTouser     transactioneditz[]   @relation("transactioneditz_createdByUserTouser")
  transactioneditz_transactioneditz_updatedByUserTouser     transactioneditz[]   @relation("transactioneditz_updatedByUserTouser")
  transactionz_transactionz_createdByUserTouser             transactionz[]       @relation("transactionz_createdByUserTouser")
  transactionz_transactionz_updatedByUserTouser             transactionz[]       @relation("transactionz_updatedByUserTouser")
  truck_truck_createdByUserTouser                           truck[]              @relation("truck_createdByUserTouser")
  truck_truck_updatedByUserTouser                           truck[]              @relation("truck_updatedByUserTouser")
  truckedit_truckedit_createdByUserTouser                   truckedit[]          @relation("truckedit_createdByUserTouser")
  truckedit_truckedit_updatedByUserTouser                   truckedit[]          @relation("truckedit_updatedByUserTouser")
  truckownership                                            truckownership[]
  truckownershipedit                                        truckownershipedit[]
  user_user_createdByUserTouser                             user?                @relation("user_createdByUserTouser", fields: [createdByUser], references: [username], onDelete: Restrict, map: "User_createdByUser_fkey")
  other_user_user_createdByUserTouser                       user[]               @relation("user_createdByUserTouser")
  user_user_updatedByUserTouser                             user?                @relation("user_updatedByUserTouser", fields: [updatedByUser], references: [username], onDelete: Restrict, map: "User_updatedByUser_fkey")
  other_user_user_updatedByUserTouser                       user[]               @relation("user_updatedByUserTouser")
  userbranch                                                userbranch[]
  userbranchedit                                            userbranchedit[]
  useredit_useredit_createdByUserTouser                     useredit[]           @relation("useredit_createdByUserTouser")
  useredit_useredit_updatedByUserTouser                     useredit[]           @relation("useredit_updatedByUserTouser")
  useredit_useredit_userIdTouser                            useredit[]           @relation("useredit_userIdTouser")
  userrole                                                  userrole[]
  userroleedit                                              userroleedit[]

  @@index([createdByUser], map: "User_createdByUser_fkey")
  @@index([updatedByUser], map: "User_updatedByUser_fkey")
}

model userbranch {
  id       String @id
  userId   String
  branchId String
  branch   branch @relation(fields: [branchId], references: [id], onDelete: Cascade, map: "UserBranch_branchId_fkey")
  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserBranch_userId_fkey")

  @@unique([userId, branchId], map: "UserBranch_userId_branchId_key")
  @@index([branchId], map: "UserBranch_branchId_fkey")
}

model userbranchedit {
  id             String                        @id
  userId         String
  branchId       String
  approvalStatus userbranchedit_approvalStatus @default(pending)
  requestType    userbranchedit_requestType
  branch         branch                        @relation(fields: [branchId], references: [id], onDelete: Cascade, map: "UserBranchEdit_branchId_fkey")
  user           user                          @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserBranchEdit_userId_fkey")

  @@unique([userId, branchId], map: "UserBranchEdit_userId_branchId_key")
  @@index([branchId], map: "UserBranchEdit_branchId_fkey")
}

model useredit {
  id                                String                  @id
  userId                            String?
  fullName                          String                  @db.VarChar(100)
  username                          String                  @db.VarChar(100)
  phone                             String                  @db.VarChar(13)
  email                             String                  @db.VarChar(100)
  hashPwd                           String                  @db.VarChar(255)
  description                       String?
  requestType                       useredit_requestType
  approvalStatus                    useredit_approvalStatus @default(pending)
  createdAt                         DateTime                @default(now())
  createdByUser                     String?
  updatedAt                         DateTime?
  updatedByUser                     String?
  user_useredit_createdByUserTouser user?                   @relation("useredit_createdByUserTouser", fields: [createdByUser], references: [username], onDelete: Restrict, map: "UserEdit_createdByUser_fkey")
  user_useredit_updatedByUserTouser user?                   @relation("useredit_updatedByUserTouser", fields: [updatedByUser], references: [username], onDelete: Restrict, map: "UserEdit_updatedByUser_fkey")
  user_useredit_userIdTouser        user?                   @relation("useredit_userIdTouser", fields: [userId], references: [id], onDelete: Cascade, map: "UserEdit_userId_fkey")

  @@index([createdByUser], map: "UserEdit_createdByUser_fkey")
  @@index([updatedByUser], map: "UserEdit_updatedByUser_fkey")
  @@index([userId], map: "UserEdit_userId_fkey")
}

model userrole {
  id     String @id
  userId String
  roleId String
  role   role   @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "UserRole_roleId_fkey")
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserRole_userId_fkey")

  @@unique([userId, roleId], map: "UserRole_userId_roleId_key")
  @@index([roleId], map: "UserRole_roleId_fkey")
}

model userroleedit {
  id             String                      @id
  roleId         String
  approvalStatus userroleedit_approvalStatus @default(pending)
  userId         String
  requestType    userroleedit_requestType
  role           role                        @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "UserRoleEdit_roleId_fkey")
  user           user                        @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserRoleEdit_userId_fkey")

  @@unique([userId, roleId], map: "UserRoleEdit_userId_roleId_key")
  @@index([roleId], map: "UserRoleEdit_roleId_fkey")
}

enum permission_module {
  Dashboard
  Job_Orders                         @map("Job Orders")
  Other_Incomes                      @map("Other Incomes")
  Transactions
  Branches
  Finances___Revenue_and_Profit      @map("Finances - Revenue and Profit")
  Finances___Operational___Materials @map("Finances - Operational - Materials")
  Finances___Operational___Equipment @map("Finances - Operational - Equipment")
  Finances___Operational___Labor     @map("Finances - Operational - Labor")
  Finances___Overhead                @map("Finances - Overhead")
  Trucks
  Activity_Logs                      @map("Activity Logs")
  Users___All_Users                  @map("Users - All Users")
  Users___Roles_and_Permissions      @map("Users - Roles and Permissions")
  My_Dashboard                       @map("My Dashboard")
  Assigned_Orders                    @map("Assigned Orders")
  My_Payout                          @map("My Payout")
  My_Orders                          @map("My Orders")
  My_Transactions                    @map("My Transactions")
  My_Trucks                          @map("My Trucks")
  My_Salary                          @map("My Salary")
  Profile
}

enum approvallog_module {
  Dashboard
  Job_Orders                         @map("Job Orders")
  Other_Incomes                      @map("Other Incomes")
  Transactions
  Branches
  Finances___Revenue_and_Profit      @map("Finances - Revenue and Profit")
  Finances___Operational___Materials @map("Finances - Operational - Materials")
  Finances___Operational___Equipment @map("Finances - Operational - Equipment")
  Finances___Operational___Labor     @map("Finances - Operational - Labor")
  Finances___Overhead                @map("Finances - Overhead")
  Trucks
  Activity_Logs                      @map("Activity Logs")
  Users___All_Users                  @map("Users - All Users")
  Users___Roles_and_Permissions      @map("Users - Roles and Permissions")
  My_Dashboard                       @map("My Dashboard")
  Assigned_Orders                    @map("Assigned Orders")
  My_Payout                          @map("My Payout")
  My_Orders                          @map("My Orders")
  My_Transactions                    @map("My Transactions")
  My_Trucks                          @map("My Trucks")
  My_Salary                          @map("My Salary")
  Profile
}

enum approvallog_table {
  Dashboard
  Job_Orders            @map("Job Orders")
  Other_Incomes
  Transactions
  Revenue_and_Profit    @map("Revenue and Profit")
  Material_Expenses     @map("Material Expenses")
  Equipment_Expenses    @map("Equipment Expenses")
  Labor_Expenses        @map("Labor Expenses")
  Trucks
  Activity_Logs         @map("Activity Logs")
  All_Users             @map("All Users")
  Roles_and_Permissions @map("Roles and Permissions")
  My_Profile            @map("My Profile")
  My_Dashboard          @map("My Dashboard")
  Assigned_Orders       @map("Assigned Orders")
  My_Payout             @map("My Payout")
  My_Orders
  My_Transactions
  My_Trucks
  My_Salary
  Profile
}

enum userroleedit_approvalStatus {
  pending
  published
  rejected
}

enum contractorpay_type {
  regular
  advance
}

enum employeesalaryedit_type {
  regular
  advance
}

enum permission_method {
  view
  create
  edit
  delete
}

enum contractorpayedit_type {
  regular
  advance
}

enum userbranchedit_approvalStatus {
  pending
  published
  rejected
}

enum truckownershipedit_requestType {
  edit
  delete
  create
}

enum employeesalary_type {
  regular
  advance
}

enum userbranchedit_requestType {
  edit
  delete
  create
}

enum userroleedit_requestType {
  edit
  delete
  create
}

enum employeesalaryedit_requestType {
  edit
  delete
  create
}

enum materialedit_requestType {
  edit
  delete
  create
}

enum contractorpayedit_requestType {
  edit
  delete
  create
}

enum transactionz_approvalStatus {
  pending
  published
  rejected
}

enum otherincomeedit_requestType {
  edit
  delete
  create
}

enum branchedit_requestType {
  edit
  delete
  create
}

enum overheadedit_requestType {
  edit
  delete
  create
}

enum employeesalary_approvalStatus {
  pending
  published
  rejected
}

enum transactioneditz_requestType {
  edit
  delete
  create
}

enum truckedit_approvalStatus {
  pending
  published
  rejected
}

enum employeesalaryedit_approvalStatus {
  pending
  published
  rejected
}

enum employeepay_type {
  regular
  advance
}

enum materialedit_approvalStatus {
  pending
  published
  rejected
}

enum joborder_status {
  pending
  ongoing
  completed
  forRelease
  archive
}

enum contractorpayedit_approvalStatus {
  pending
  published
  rejected
}

enum equipmentedit_requestType {
  edit
  delete
  create
}

enum otherincomeedit_approvalStatus {
  pending
  published
  rejected
}

enum branchedit_approvalStatus {
  pending
  published
  rejected
}

enum overheadedit_approvalStatus {
  pending
  published
  rejected
}

enum transactioneditz_approvalStatus {
  pending
  published
  rejected
}

enum truckedit_requestType {
  edit
  delete
  create
}

enum equipmentedit_approvalStatus {
  pending
  published
  rejected
}

enum truckownershipedit_approvalStatus {
  pending
  published
  rejected
}

enum joborderedit_status {
  pending
  ongoing
  completed
  forRelease
  archive
}

enum useredit_requestType {
  edit
  delete
  create
}

enum useredit_approvalStatus {
  pending
  published
  rejected
}

enum user_status {
  active
  inactive
}

enum transaction_status {
  pending
  successful
  failed
}

enum joborderedit_requestType {
  edit
  delete
  create
}

enum joborderedit_approvalStatus {
  pending
  published
  rejected
rders @map("Assigned Orders")
  My_Payout @map("My Payout")
  My_Orders @map("My Orders")
  My_Transactions @map("My Transactions")
  My_Trucks @map("My Trucks")
  My_Salary @map("My Salary")
  Profile @map("Profile")
}

enum TableName {
  Dashboard 
  Job_Orders @map("Job Orders")
  Other_Incomes @map("Other_Incomes")
  Transactions @map("Transactions")
  Revenue_And_Profit @map("Revenue and Profit")
  Material_Expenses @map("Material Expenses")
  Equipment_Expenses @map("Equipment Expenses")
  Labor_Expenses @map("Labor Expenses")
  Trucks
  Activity_Logs @map("Activity Logs")
  All_Users @map("All Users")
  Roles_And_Permissions @map("Roles and Permissions")
  My_Profile @map("My Profile")
  My_Dashboard @map("My Dashboard")
  Assigned_Orders @map("Assigned Orders")
  My_Payout @map("My Payout")
  My_Orders
  My_Transactions
  My_Trucks
  My_Salary
  Profile

}
