// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Tables

model User {
  id String @id @default(uuid())

  fullName        String  @db.VarChar(100)
  username    String  @unique @db.VarChar(100)
  phone       String @db.VarChar(13)
  email       String?  @unique @db.VarChar(100)
  hashPwd     String  @db.VarChar(255)
  description String?
  image String?
  refreshToken String?

  status AccountStatus? @default(active)

  createdAt   DateTime @default(now())
  createdByUser String?
  updatedAt   DateTime @updatedAt
  updatedByUser String?

  admin       Admin?
  customer    Customer?
  contractor  Contractor?
  employee    Employee?
  activityLog ActivityLog[]
  roles       UserRole[]
  branches       UserBranch[]

  createdUsers    User[]     @relation("CreatedBy")
  updatedUsers    User[]     @relation("UpdatedBy")

  createdRole            Role[]            @relation("CreatedBy")
  createdBranches        Branch[]          @relation("CreatedBy")
  createdTrucks          Truck[]           @relation("CreatedBy")
  createdTransactions     Transaction[]     @relation("CreatedBy")
  createdJobOrders        JobOrder[]        @relation("CreatedBy")
  createdContractorPays     ContractorPay[]     @relation("CreatedBy")
  createdEmployeePays     EmployeePay[]     @relation("CreatedBy")
  createdPayComponents     PayComponent[]     @relation("CreatedBy")
  createdEquipments     Equipment[]     @relation("CreatedBy")
  createdOtherIncomes     OtherIncome[]     @relation("CreatedBy")
  createdOverheads     Overhead[]     @relation("CreatedBy")

  transferredTruckOwnerships TruckOwnership[] @relation("TransferredBy")

  updatedBranches        Branch[]          @relation("UpdatedBy")
  updatedTrucks          Truck[]           @relation("UpdatedBy")
  updatedTransactions     Transaction[]     @relation("UpdatedBy")
  updatedJobOrders        JobOrder[]        @relation("UpdatedBy")
  updatedContractorPays     ContractorPay[]     @relation("UpdatedBy")
  updatedEmployeePays     EmployeePay[]     @relation("UpdatedBy")
  updatedPayComponents     PayComponent[]     @relation("UpdatedBy")
  updatedEquipments     Equipment[]     @relation("UpdatedBy")
  updatedOtherIncomes     OtherIncome[]     @relation("UpdatedBy")
  updatedOverheads     Overhead[]     @relation("UpdatedBy")

  requestedLogs ApprovalLog[] @relation("RequestedBy")
  approvedLogs ApprovalLog[] @relation("ApprovedBy")

  createdBy User? @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy User? @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)

  @@map("user")
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("admin")

}

model Customer {
  id     String           @id @default(uuid())
  userId String @unique
  trucks TruckOwnership[]
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobOrders JobOrder[] @relation("Customer")
  @@map("customer")

}

model Contractor {
  id         String  @id @default(uuid())
  userId     String @unique
  commission Decimal @db.Decimal(13, 2)

  contractorPay ContractorPay[]
  jobOrders      JobOrder[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("contractor")

}

model Employee {
  id             String           @id @default(uuid())
  userId         String @unique
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  employeePay EmployeePay[]
  @@map("employee")

}

model Branch {
  id String @id @default(uuid())

  branchName           String        @unique @db.VarChar(100)
  description    String?
  address        String

  createdAt   DateTime @default(now())
  createdByUser String
  updatedAt   DateTime @updatedAt
  updatedByUser String

  jobOrders    JobOrder[]
  otherIncomes OtherIncome[]
  equipments   Equipment[]
  overheads    Overhead[]
  employeePays    EmployeePay[]
  contractorPays    ContractorPay[]

  userBranches       UserBranch[]

  createdBy User @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy User @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)

  @@map("branch")
}

model Truck {
  id String @id @default(uuid())

  plate       String   @db.VarChar(10) @unique
  make        String   @db.VarChar(20) 
  model       String   @db.VarChar(20)
  image String?
  engine String?
  createdAt   DateTime @default(now())
  createdByUser String
  updatedAt   DateTime @updatedAt
  updatedByUser String

  owners    TruckOwnership[]
  jobOrders JobOrder[]


  createdBy User @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy User @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)

  @@map("truck")

}


model TruckOwnership {
  id      String @id @default(uuid())
  truckId String
  truck   Truck  @relation(fields: [truckId], references: [id], onDelete: Cascade)

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  transferredByUser String
  transferredBy   User   @relation("TransferredBy", fields: [transferredByUser], references: [username], onDelete: NoAction)

  startDate DateTime  @default(now())
  endDate   DateTime?
  @@map("truckownership")

}

model ContractorPay {
  id           String @id @default(uuid())
  contractorId String
  branchId String

  type   PaymentType
  amount Decimal     @db.Decimal(13, 2)

  createdAt   DateTime @default(now())
  createdByUser String
  updatedAt   DateTime @updatedAt
  updatedByUser String

  contractor Contractor @relation(fields: [contractorId], references: [id])
  branch Branch @relation(fields: [branchId], references: [id])
  createdBy  User      @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy  User      @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)
  @@map("contractorpay")
}

model EmployeePay {
  id        String   @id @default(uuid())
  employeeId String
  branchId String
  payComponents    PayComponent[] 
  type PaymentType @default(regular)
  
  createdAt   DateTime @default(now())
  createdByUser String
  updatedAt   DateTime @updatedAt
  updatedByUser String

  employee      Employee     @relation(fields: [employeeId], references: [id], onDelete: NoAction)
  branch      Branch     @relation(fields: [branchId], references: [id], onDelete: NoAction)
  createdBy User              @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy User              @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)
  @@map("employeepay")

}

model PayComponent {
  id        String   @id @default(uuid())
  componentId String
  employeePayId String
  amount Decimal @db.Decimal(13, 2)

  createdAt   DateTime @default(now())
  createdByUser String
  updatedAt   DateTime @updatedAt
  updatedByUser String

  component      Component     @relation(fields: [componentId], references: [id], onDelete: NoAction)
  employeePay      EmployeePay     @relation(fields: [employeePayId], references: [id], onDelete: NoAction)
  createdBy User              @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy User              @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)

  @@map("paycomponent")

}

model Component {
  id                 String               @id @default(uuid())
  componentName               String   
  payComponents     PayComponent[]
  @@map("component")

}

model ActivityLog {
  id        String   @id @default(uuid())
  createdByUser    String
  remarks String?
  activity  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [createdByUser], references: [username], onDelete: NoAction)

  @@map("activitylog")

}

model Transaction {
  id              String   @id @default(uuid())
  jobOrderCode    String
  senderName      String   @db.VarChar(100)
  sessionId       String?   @unique
  referenceNumber String?
  mop             String?  @db.VarChar(20)
  amount          Decimal  @db.Decimal(13, 2)
  email           String?
  status          TransactionStatus   @default(pending) // pending | paid | failed
  createdAt       DateTime @default(now())
  createdByUser String?
  updatedAt   DateTime @updatedAt
  updatedByUser String?

  jobOrder JobOrder @relation(fields: [jobOrderCode], references: [jobOrderCode])
  createdBy User?             @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy User?             @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)

  @@map("transaction")

}

model OtherIncome {
  id String @id @default(uuid())

  description String
  amount      Decimal @db.Decimal(13, 2)
  branchId    String
  branch      Branch  @relation(fields: [branchId], references: [id])

  createdAt   DateTime @default(now())
  createdByUser String
  updatedAt   DateTime @updatedAt
  updatedByUser String

  createdBy User             @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy User             @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)

  @@map("otherincome")

}

model Equipment {
  id String @id @default(uuid())

  equipmentName     String  @db.VarChar(100)
  quantity Int
  price    Decimal @db.Decimal(13, 2)
  branchId String

  createdAt   DateTime @default(now())
  createdByUser String
  updatedAt   DateTime @updatedAt
  updatedByUser String

  branch    Branch @relation(fields: [branchId], references: [id])
  createdBy User  @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy User  @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)
  @@map("equipment")

}

model Material {
  id         String @id @default(uuid())
  jobOrderId String

  materialName     String  @db.VarChar(100)
  quantity Int
  price    Decimal @db.Decimal(13, 2)

  createdAt DateTime @default(now())

  jobOrder JobOrder @relation(fields: [jobOrderId], references: [id])
  @@map("material")

}

model JobOrder {
  id String @id @default(uuid())

  jobOrderCode String @unique
  truckId      String
  branchId     String
  customerId String
  contractorId String?

  status      OrderStatus @default(pending)
  description String
  images        JobOrderImage[]
  labor       Decimal?     @db.Decimal(13, 2)
  contractorPercent Decimal? @db.Decimal(13, 2)
  completedAt DateTime?

  transactions Transaction[]
  materials    Material[] 

  createdAt   DateTime @default(now())
  createdByUser String
  updatedAt   DateTime @updatedAt
  updatedByUser String

  truck      Truck      @relation(fields: [truckId], references: [id], onDelete: Cascade)
  branch     Branch     @relation(fields: [branchId], references: [id])
  contractor Contractor? @relation(fields: [contractorId], references: [id])
  customer  Customer       @relation("Customer", fields: [customerId], references: [id], onDelete: NoAction)
  createdBy  User       @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy  User       @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)
  @@map("joborder")

}

model JobOrderImage {
  id         String   @id @default(uuid())
  jobOrderId String
  type       ImageType   // "before" or "after"
  filename   String

  jobOrder   JobOrder @relation(fields: [jobOrderId], references: [id], onDelete: Cascade)
  @@map("joborderimage")
}

model Overhead {
  id String @id @default(uuid())

  description String
  amount      Decimal @db.Decimal(13, 2)
  isMonthly   Boolean? @default(false)
  branchId    String

  createdAt   DateTime @default(now())
  createdByUser String
  updatedAt   DateTime @updatedAt
  updatedByUser String

  branch    Branch @relation(fields: [branchId], references: [id])
  createdBy User  @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  updatedBy User  @relation("UpdatedBy", fields: [updatedByUser], references: [username], onDelete: NoAction)
  @@map("overhead")

}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           Role           @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("userrole")

}

model UserBranch {
  id     String @id @default(uuid())
  userId String 
  branchId String

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch           Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@unique([userId, branchId])
  @@map("userbranch")

}

model Role {
  id             String           @id @default(uuid())
  roleName           String           @db.VarChar(100) @unique
  baseRoleId     String?
  baseRole       Role?             @relation("BaseRole", fields: [baseRoleId], references: [id], onDelete: Cascade)
  baseRoles      Role[]           @relation("BaseRole")
  isCustom       Boolean?
  users          UserRole[]
  permissions    RolePermission[]

  createdByUser String?
  createdBy   User?   @relation("CreatedBy", fields: [createdByUser], references: [username], onDelete: NoAction)
  @@map("role")

}

model Permission {
  id          String           @id @default(uuid())
  module      Module 
  permissionName      String           @db.VarChar(100) @unique
  method      Method
  description String?
  roles       RolePermission[]
  @@map("permission")

}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String

  approval Boolean

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("rolepermission")

}

model ApprovalLog {
  id            String   @id @default(uuid())
  tableName     String
  recordId      String?  // null for new CREATE requests
  actionType    RequestType
  payload       Json
  requestedByUser   String
  status        ApprovalStatus @default(pending)
  approvedByUser    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  responseComment String?

  requestedBy User    @relation("RequestedBy", fields: [requestedByUser], references: [username], onDelete: NoAction)
  approvedBy User?    @relation("ApprovedBy", fields: [approvedByUser], references: [username], onDelete: NoAction)

  @@map("approvallog")
}



// enum

enum OrderStatus {
  pending
  ongoing
  completed
  forRelease
  archived
}

enum AccountStatus {
  active
  inactive
}

enum ApprovalStatus {
  pending
  published
  rejected
}

enum RequestType {
  edit
  delete
  create
}

enum ImageType {
  before
  after
}
enum PaymentType {
  regular
  advance
}

enum TransactionStatus {
  pending
  successful
  failed
}

enum Method {
  view
  create
  edit
  delete
}

enum Module {
  Dashboard
  Job_Orders @map("Job Orders")
  Other_Incomes @map("Other Incomes")
  Transactions @map("Transactions")
  Branches
  Finances_Revenue_And_Profit @map("Finances - Revenue and Profit")
  Finances_Operational_Materials @map("Finances - Operational - Materials")
  Finances_Operational_Equipment @map("Finances - Operational - Equipment")
  Finances_Operational_Labor @map("Finances - Operational - Labor")
  Finances_Overhead @map("Finances - Overhead")
  Trucks @map("Trucks")
  Activity_Logs @map("Activity Logs")
  Users_All_Users @map("Users - All Users")
  Users_Roles_And_Permissions @map("Users - Roles and Permissions")
  My_Dashboard @map("My Dashboard")
  Assigned_Orders @map("Assigned Orders")
  My_Payout @map("My Payout")
  My_Orders @map("My Orders")
  My_Transactions @map("My Transactions")
  My_Trucks @map("My Trucks")
  My_Salary @map("My Salary")
  Profile @map("Profile")
  Approval_Logs @map("Approval Logs")
  Customers
  Contractors
  Employees
}

enum TableName {
  Dashboard 
  Job_Orders @map("Job Orders")
  Other_Incomes @map("Other_Incomes")
  Transactions @map("Transactions")
  Revenue_And_Profit @map("Revenue and Profit")
  Material_Expenses @map("Material Expenses")
  Equipment_Expenses @map("Equipment Expenses")
  Labor_Expenses @map("Labor Expenses")
  Trucks
  Activity_Logs @map("Activity Logs")
  All_Users @map("All Users")
  Roles_And_Permissions @map("Roles and Permissions")
  My_Profile @map("My Profile")
  My_Dashboard @map("My Dashboard")
  Assigned_Orders @map("Assigned Orders")
  My_Payout @map("My Payout")
  My_Orders
  My_Transactions
  My_Trucks
  My_Salary
  Profile

}
