// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ApprovalStatus {
  pending
  approved
  published
  rejected
}

model User {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  createdById  String?
  admins       Admin[]
  customers    Customer[]
  contractors  Contractor[]
  employees    Employee[]
  activityLogs ActivityLog[]
  roles        UserRole[]

  createdBy    User?         @relation("CreatedBy", fields: [createdById], references: [id])
  createdUsers User[]        @relation("CreatedBy")
  userVersions UserVersion[] @relation("Version")

  updatedUsers UserVersion[] @relation("UpdatedBy")

  createdBranches Branch[]        @relation("CreatedBy")
  updatedBranches BranchVersion[] @relation("UpdatedBy")

  createdTrucks             Truck[]          @relation("CreatedBy")
  transferredTruckOwnership TruckOwnership[] @relation("TransferredBy")

  createdContractorPay ContractorPay[]        @relation("CreatedBy")
  updatedContractorPay ContractorPayVersion[] @relation("UpdatedBy")

  createdEmployeeSalary EmployeeSalary[]        @relation("CreatedBy")
  updatedEmployeeSalary EmployeeSalaryVersion[] @relation("UpdatedBy")

  createdTransaction Transaction[]        @relation("CreatedBy")
  updatedTransaction TransactionVersion[] @relation("UpdatedBy")

  createdOtherIncome OtherIncome[]        @relation("CreatedBy")
  updatedOtherIncome OtherIncomeVersion[] @relation("UpdatedBy")

  createdEquipment Equipment[]        @relation("CreatedBy")
  updatedEquipment EquipmentVersion[] @relation("UpdatedBy")

  createdJobOrder JobOrder[]        @relation("CreatedBy")
  updatedJobOrder JobOrderVersion[] @relation("UpdatedBy")

  createdOverheadExpenses OverheadExpenses[]        @relation("CreatedBy")
  updatedOverheadExpenses OverheadExpensesVersion[] @relation("UpdatedBy")

  createdRole Role[] @relation("CreatedBy")
}

model UserVersion {
  id             String         @id @default(uuid())
  userId         String?
  approvalStatus ApprovalStatus

  name        String @db.VarChar(100)
  phone       String @db.VarChar(13)
  email       String @unique @db.VarChar(100)
  hashPwd     String @db.VarChar(255)
  description String

  updatedAt   DateTime? @updatedAt
  updatedById String?
  user        User?     @relation("Version", fields: [userId], references: [id])
  updatedBy   User?     @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model Admin {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Customer {
  id     String           @id @default(uuid())
  userId String
  trucks TruckOwnership[]
  user   User             @relation(fields: [userId], references: [id])
}

model Contractor {
  id         String  @id @default(uuid())
  userId     String
  commission Decimal @db.Decimal(13, 2)

  contractorPay ContractorPay[]
  JobOrder      JobOrder[]
  user          User            @relation(fields: [userId], references: [id])
}

model Employee {
  id             String           @id @default(uuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  employeeSalary EmployeeSalary[]
}

model Branch {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  createdById String

  OtherIncome      OtherIncomeVersion[]
  Equipment        EquipmentVersion[]
  JobOrder         JobOrder[]
  OverheadExpenses OverheadExpensesVersion[]

  versions  BranchVersion[]
  createdBy User            @relation("CreatedBy", fields: [createdById], references: [id])
}

model BranchVersion {
  id             String         @id @default(uuid())
  branchId       String?
  name           String         @db.VarChar(100)
  description    String
  address        String
  approvalStatus ApprovalStatus
  updatedAt      DateTime       @updatedAt
  updatedById    String?

  branch    Branch? @relation(fields: [branchId], references: [id])
  updatedBy User?   @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model Truck {
  id          String   @id @default(uuid())
  plate       String   @db.VarChar(10)
  make        String   @db.VarChar(20)
  model       String   @db.VarChar(20)
  createdAt   DateTime @default(now())
  createdById String

  owners    TruckOwnership[]
  jobOrders JobOrder[]

  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])
}

model TruckOwnership {
  id      String @id @default(uuid())
  truckId String
  truck   Truck  @relation(fields: [truckId], references: [id])

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  transferredById String
  transferredBy   User   @relation("TransferredBy", fields: [transferredById], references: [id])

  startDate DateTime  @default(now())
  endDate   DateTime?
}

enum PaymentType {
  regular
  advance
}

model ContractorPay {
  id String @id @default(uuid())

  contractorId String
  contractor   Contractor @relation(fields: [contractorId], references: [id])

  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedBy", fields: [createdById], references: [id])

  versions ContractorPayVersion[]
}

model ContractorPayVersion {
  id              String         @id @default(uuid())
  contractorPayId String?
  approvalStatus  ApprovalStatus
  type            PaymentType
  amount          Decimal        @db.Decimal(13, 2)

  updatedAt DateTime? @updatedAt

  updatedById   String
  updatedBy     User           @relation("UpdatedBy", fields: [updatedById], references: [id])
  contractorPay ContractorPay? @relation(fields: [contractorPayId], references: [id])
}

model PayComponent {
  id             String                  @id @default(uuid())
  name           String                  @db.VarChar(20)
  employeeSalary EmployeeSalaryVersion[]
}

model EmployeeSalary {
  id String @id @default(uuid())

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())

  createdById      String
  createdBy        User                    @relation("CreatedBy", fields: [createdById], references: [id])
  employeeSalaries EmployeeSalaryVersion[]
}

model EmployeeSalaryVersion {
  id               String         @id @default(uuid())
  employeeSalaryId String?
  approvalStatus   ApprovalStatus
  componentId      String
  component        PayComponent   @relation(fields: [componentId], references: [id])

  type   PaymentType @default(regular)
  amount Decimal     @db.Decimal(13, 2)

  updatedAt DateTime? @updatedAt

  updatedById    String
  updatedBy      User            @relation("UpdatedBy", fields: [updatedById], references: [id])
  employeeSalary EmployeeSalary? @relation(fields: [employeeSalaryId], references: [id])
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  activity    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id         String @id @default(uuid())
  jobOrderId String

  createdAt   DateTime @default(now())
  createdById String

  versions  TransactionVersion[]
  jobOrder  JobOrder             @relation(fields: [jobOrderId], references: [id])
  createdBy User                 @relation("CreatedBy", fields: [createdById], references: [id])
}

model TransactionVersion {
  id             String         @id @default(uuid())
  transactionId  String?
  approvalStatus ApprovalStatus
  name           String         @db.VarChar(100)
  mop            String         @db.VarChar(20)
  amount         Decimal        @db.Decimal(13, 2)
  updatedAt      DateTime?      @updatedAt

  updatedById String
  updatedBy   User         @relation("UpdatedBy", fields: [updatedById], references: [id])
  transaction Transaction? @relation(fields: [transactionId], references: [id])
}

model OtherIncome {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  createdById String
  createdBy   User                 @relation("CreatedBy", fields: [createdById], references: [id])
  versions    OtherIncomeVersion[]
}

model OtherIncomeVersion {
  id             String         @id @default(uuid())
  otherIncomeId  String?
  approvalStatus ApprovalStatus

  description String
  amount      Decimal @db.Decimal(13, 2)
  branchId    String
  branch      Branch  @relation(fields: [branchId], references: [id])

  updatedAt DateTime @updatedAt

  updatedById String
  updatedBy   User         @relation("UpdatedBy", fields: [updatedById], references: [id])
  otherIncome OtherIncome? @relation(fields: [otherIncomeId], references: [id])
}

model Equipment {
  id String @id @default(uuid())

  createdAt DateTime @default(now())

  createdById String
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])

  versions EquipmentVersion[]
}

model EquipmentVersion {
  id             String         @id @default(uuid())
  equipmentId    String?
  approvalStatus ApprovalStatus

  name     String  @db.VarChar(100)
  quantity Int
  price    Decimal @db.Decimal(13, 2)

  branchId String

  updatedAt   DateTime? @updatedAt
  updatedById String
  updatedBy   User      @relation("UpdatedBy", fields: [updatedById], references: [id])

  branch    Branch     @relation(fields: [branchId], references: [id])
  equipment Equipment? @relation(fields: [equipmentId], references: [id])
}

model Material {
  id         String   @id @default(uuid())
  jobOrderId String
  jobOrder   JobOrder @relation(fields: [jobOrderId], references: [id])
  name       String   @db.VarChar(100)
  quantity   Int
  price      Decimal  @db.Decimal(13, 2)
  createdAt  DateTime @default(now())
}

enum OrderStatus {
  unassigned
  ongoing
  completed
  forRelease
}

model JobOrder {
  id           String   @id @default(uuid())
  jobOrderCode String   @unique
  createdAt    DateTime @default(now())

  truckId      String
  branchId     String
  contractorId String
  createdById  String

  transactions Transaction[]
  versions     JobOrderVersion[]
  materials    Material[]

  truck      Truck      @relation(fields: [truckId], references: [id])
  branch     Branch     @relation(fields: [branchId], references: [id])
  contractor Contractor @relation(fields: [contractorId], references: [id])
  createdBy  User       @relation("CreatedBy", fields: [createdById], references: [id])
}

model JobOrderVersion {
  id         String @id @default(uuid())
  jobOrderId String

  status      OrderStatus
  description String
  labor       Decimal     @db.Decimal(13, 2)
  completedAt DateTime?

  updatedById    String
  updatedAt      DateTime?      @updatedAt
  approvalStatus ApprovalStatus
  jobOrder       JobOrder       @relation(fields: [jobOrderId], references: [id])
  updatedBy      User           @relation("UpdatedBy", fields: [updatedById], references: [id])
}

model OverheadExpenses {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  createdById String
  createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])

  versions OverheadExpensesVersion[]
}

model OverheadExpensesVersion {
  id                 String @id @default(uuid())
  overheadExpensesId String

  description String
  amount      Decimal @db.Decimal(13, 2)
  branchId    String

  updatedById      String
  updatedAt        DateTime         @updatedAt
  overheadExpenses OverheadExpenses @relation(fields: [overheadExpensesId], references: [id])
  updatedBy        User             @relation("UpdatedBy", fields: [updatedById], references: [id])
  branch           Branch           @relation(fields: [branchId], references: [id])
}

model UserRole {
  id             String         @id @default(uuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  roleId         String
  role           Role           @relation(fields: [roleId], references: [id])
  approvalStatus ApprovalStatus
}

model Role {
  id             String           @id @default(uuid())
  name           String           @db.VarChar(100)
  baseRoleId     String
  baseRole       Role             @relation("BaseRole", fields: [baseRoleId], references: [id])
  baseRoles      Role[]           @relation("BaseRole")
  isCustom       Boolean
  users          UserRole[]
  permissions    RolePermission[]
  approvalStatus ApprovalStatus

  createdById String?
  createdBy   User?   @relation("CreatedBy", fields: [createdById], references: [id])
}

enum Method {
  view
  create
  edit
  delete
}

model Permission {
  id          String           @id @default(uuid())
  module      String           @db.VarChar(100)
  action      String           @db.VarChar(100)
  method      Method
  approval    Boolean
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id     String @id @default(uuid())
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])

  approvalStatus ApprovalStatus
}

enum Module {
  JobOrder @map("Job Order")
}
model ApprovalLog {
  id     String @id @default(uuid())
  module Module
  moduleVersionId String
  requestComment String
  responseComment String

}
